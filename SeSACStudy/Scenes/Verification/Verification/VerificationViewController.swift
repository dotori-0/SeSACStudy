//
//  VerificationViewController.swift
//  SeSACStudy
//
//  Created by SC on 2022/11/10.
//

import UIKit

import FirebaseAuth
import RxCocoa
import RxSwift

final class VerificationViewController: BaseViewController {
    // MARK: - Properties
    private let verificationView = VerificationView()
    private let verificationViewModel = VerificationViewModel()
    private let disposeBag = DisposeBag()

    // MARK: - Life Cycle
    override func loadView() {
        view = verificationView
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()

        bind()
//        bindTextFieldWithCALayer()  // CALayer
        
        verificationView.userInputView.textField.becomeFirstResponder()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        setNavigationBar()
    }
    
    override func viewDidLayoutSubviews() {
//        verificationView.phoneNumberTextField.setBottomLine()  // CALayer
    }
    
    // MARK: - Setting Methods
    private func setNavigationBar() {
        print(self, "navigationController: \(navigationController)")
        navigationController?.interactivePopGestureRecognizer?.isEnabled = false
        navigationItem.hidesBackButton = true
        
        navigationController?.navigationBar.scrollEdgeAppearance = nil
        // navigationItemÎ°ú Ï†ëÍ∑ºÌïòÎ©¥ Í∏∞Ï°¥Ïùò appearanceÍ∞Ä Î∞îÎÄåÏßÄ ÏïäÏùå
//        navigationItem.scrollEdgeAppearance = nil
//        UINavigationBar.appearance().scrollEdgeAppearance = nil  // ÏïàÎêòÎäî Ïù¥Ïú†? ‚ùî
        

//        navigationItem.backBarButtonItem = backBarButtonItem  // Îã§Ïùå VCÏóêÏÑú black backBarButtonItemÏù¥ ÎÇòÏò§ÏßÄÎßå, < Í∞Ä Í∞ôÏù¥ ÎÇòÏò¥
//        navigationItem.leftBarButtonItem = backBarButtonItem  // ÌòÑÏû¨ VCÏóêÏÑú backBarButtonItemÏù¥ ÎÇòÏò§Í≥†, Îã§Ïùå VCÏóêÏÑúÎäî Í∏∞Ï°¥ < BackÏù¥ ÎÇòÏò¥
    }
    
    // MARK: - Binding
    private func bind() {
//        let input = VerificationViewModel.Input(editingDidBegin: verificationView.userInputView.textField.rx.controlEvent([.editingDidBegin]),
//                                                editingDidEnd: verificationView.userInputView.textField.rx.controlEvent([.editingDidEnd]),
        let input = VerificationViewModel.Input(phoneNumber: verificationView.userInputView.textField.rx.text,
                                                verifyButtonTap: verificationView.button.rx.tap)
        
        let output = verificationViewModel.transform(input)
        var isValid = false
        
        // ÏûÖÎ†• ÏÉÅÌÉúÏóê Îî∞Îùº TextFieldÏùò bottomLine Ïª¨Îü¨ Î∞îÍæ∏Í∏∞
//        output.editingDidBegin
//            .drive(with: self) { vc, _ in
//                vc.verificationView.userInputView.isTextFieldFocused = true  // UIView
//            }
//            .disposed(by: disposeBag)
//
//        output.editingDidEnd
//            .drive(with: self) { vc, _ in
//                vc.verificationView.userInputView.isTextFieldFocused = false  // UIView
//            }
//            .disposed(by: disposeBag)
        
        // ÏûÖÎ†•Ìïú Î≤àÌò∏Ïùò Ïú†Ìö®ÏÑ±Ïóê Îî∞Îùº Î≤ÑÌäº Ïª¨Îü¨ Î∞îÍæ∏Í∏∞
        output.isValidNumber
        //            .bind(to: verificationView.verifyButton.rx.isActivated)  // rx Í∞ùÏ≤¥ÎùºÎ©¥ selfÍ∞Ä ÌïÑÏöîÌïòÏßÄ ÏïäÏßÄÎßå ÏùºÎ∞ò Í∞ùÏ≤¥ÎùºÎ©¥ withUnretained(self) ÎÇò [weak self]Î•º ÌÜµÌï¥ selfÏùò Í∞ùÏ≤¥Î°ú Ï†ëÍ∑ºÌó§Ïïº ÌïòÎäî Í≤É..? ‚ùî
            .withUnretained(self)
            .bind(onNext: { (vc, isValidNumber) in
                vc.verificationView.button.isActivated = isValidNumber
                isValid = isValidNumber
            })
            .disposed(by: disposeBag)
        
        output.number
            .drive(verificationView.userInputView.textField.rx.text)
            .disposed(by: disposeBag)

        output.verifyButtonTap
            .withUnretained(self)
            .bind { (vc, _) in
                
//                let isValid = BehaviorRelay(value: false)
//                output.isValidNumber.bind(to: isValid).disposed(by: vc.disposeBag)
                
                let output2 = vc.verificationViewModel.transform(input)  // Îã§Ïãú Î∞îÍøîÏïºÎßå ÌÖçÏä§Ìä∏ÌïÑÎìú ÌÖçÏä§Ìä∏Ïóê Íµ≠Í∞ÄÎ≤àÌò∏ Î∂ôÏùÄ Í±∏ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî Ïù¥Ïú†Îäî.. Í∑∏ÎÉ• output2.prefixedNumberÏù¥ rx Í∞ùÏ≤¥Í∞Ä ÏïÑÎãàÎùº String Ïù¥ÎùºÏÑú..?‚ùî
                
                if isValid {
                    vc.showToast(message: String.Verification.startVerification, duration: 2.0)
//                    vc.verifyPhoneNumber(output.prefixedNumber)  // Íµ≠Í∞ÄÎ≤àÌò∏Î•º Î∂ôÏù∏ Î≤àÌò∏
                    vc.verifyPhoneNumber(output2.prefixedNumber)  // Íµ≠Í∞ÄÎ≤àÌò∏Î•º Î∂ôÏù∏ Î≤àÌò∏
//                    vc.verifyFictionalPhoneNumber()  // Firebase Í∞ÄÏÉÅÎ≤àÌò∏ ÌÖåÏä§Ìä∏
//                    vc.verifyPhoneNumberWithPush()   // Ïã§Ï†ú Í∞ÄÏÉÅÎ≤àÌò∏ ÌÖåÏä§Ìä∏
                } else {
                    vc.showToast(message: String.Verification.wrongNumberFormat)
                }
            }
            .disposed(by: disposeBag)
        
        
        

        
        
//        verificationView.phoneNumberInputView.textField.rx.controlEvent([.editingDidBegin])
//            .asDriver()
//            .drive(with: self) { vc, _ in
//                vc.verificationView.phoneNumberInputView.isTextFieldFocused = true  // UIView
//            }
//            .disposed(by: disposeBag)
//
//        verificationView.phoneNumberInputView.textField.rx.controlEvent([.editingDidEnd])
//            .asDriver()
//            .drive(with: self) { vc, _ in
//                vc.verificationView.phoneNumberInputView.isTextFieldFocused = false  // UIView
//            }
//            .disposed(by: disposeBag)
    }
    
//    private func bindTextFieldWithCALayer() {
//        verificationView.phoneNumberTextField.rx.controlEvent([.editingDidBegin])
//            .asDriver()
//            .drive(with: self) { vc, _ in
//                vc.verificationView.phoneNumberTextField.changeBottomLineColorToFocus()  // CALayer
//            }
//            .disposed(by: disposeBag)
//
//        verificationView.phoneNumberTextField.rx.controlEvent([.editingDidEnd])
//            .asDriver()
//            .drive(with: self) { vc, _ in
//                vc.verificationView.phoneNumberTextField.changeBottomLineColorToFocus()  // CALayer
//            }
//            .disposed(by: disposeBag)
//    }
}

extension VerificationViewController: UITextFieldDelegate {
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        view.endEditing(true)
    }
}

extension VerificationViewController {
    private func verifyPhoneNumber(_ prefixedNumber: String) {
//        let number = "+447893920177"
//        let number = "+447893920172"
//        let number = "+15412071596"
//        let number = "+447893920175"  // ÎßâÏúºÏã†ÎìØ?
//        let number = "+447893920162"
//        let number = "+447893920174"  // ÎßâÌûò
        let number = "+67074253187"
        print("üá∞üá∑ Íµ≠Í∞ÄÎ≤àÌò∏ Ïû•Ï∞©Î≤àÌò∏: \(prefixedNumber)")
        
        PhoneAuthProvider.provider()
          .verifyPhoneNumber(prefixedNumber, uiDelegate: nil) { [weak self] verificationID, error in
              
              if let error = error {
                  print(error)
                  let authError = error as NSError
                  print(authError)
                  if authError.code == AuthErrorCode.tooManyRequests.rawValue {
                      self?.showToast(message: String.Verification.tooManyRequests)
                  } else {
                      self?.showToast(message: String.Verification.otherErrors)
                  }
                  return
              }
              
              guard let verificationID else { return }
              print("üÜî \(verificationID)")
              
//              NewUser.shared.phoneNumber = prefixedNumber
              UserDefaults.phoneNumber = prefixedNumber
              
              let logInVC = LogInViewController()
              logInVC.verificationID = verificationID
              
              self?.transition(to: logInVC)
          }
    }
    
    // Firebase Í∞ÄÏÉÅ Î≤àÌò∏
    private func verifyFictionalPhoneNumber() {
//        let phoneNumber = "+16505554567"
        let phoneNumber = "+821011112222"

        // This test verification code is specified for the given test phone number in the developer console.
        let testVerificationCode = "121212"

        Auth.auth().settings?.isAppVerificationDisabledForTesting = true
        PhoneAuthProvider.provider().verifyPhoneNumber(phoneNumber, uiDelegate:nil) {
                                                                    verificationID, error in
            if ((error) != nil) {
              // Handles error
//              self.handleError(error)
                print(error)
              return
            }
            
            let credential = PhoneAuthProvider.provider().credential(withVerificationID: verificationID ?? "",
                                                                       verificationCode: testVerificationCode)
//            Auth.auth().signInAndRetrieveData(with: credential) { authData, error in
            Auth.auth().signIn(with: credential) { authData, error in
                if ((error) != nil) {
                // Handles error
//                self.handleError(error)
                print(error)
                return
              }

                print("‚ò∫Ô∏è \(authData?.user)")
            }
        }
    }
    
//    private func verifyPhoneNumberWithPush() {
//        let phoneNumber = "+447893920172"
//
//        // This test verification code is specified for the given test phone number in the developer console.
//        let testVerificationCode = "121212"
//
//        Auth.auth().settings?.isAppVerificationDisabledForTesting = false
//        PhoneAuthProvider.provider().verifyPhoneNumber(phoneNumber, uiDelegate:nil) { [weak self] verificationID, error in
//            print("üÜî \(verificationID)")
//
//            if let error = error {
//                print(error)
//                let authError = error as NSError
//                print(authError)
//                if authError.code == AuthErrorCode.tooManyRequests.rawValue {
//                    self?.showToast(message: String.Verification.tooManyRequests)
//                } else {
//                    self?.showToast(message: String.Verification.otherErrors)
//                }
//                return
//            }
//
//            self?.showToast(message: String.Verification.startVerification)
//        }
//    }
}
